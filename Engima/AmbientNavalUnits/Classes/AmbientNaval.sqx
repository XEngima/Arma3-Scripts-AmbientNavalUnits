/*
 * Name:	AmbientNaval
 * Date:	2017-07-17
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Class that handles the logic for all ambient infantry groups. Spawning and removals etc.
 */

call compile preprocessFileLineNumbers "Engima\AmbientNavalUnits\Classes\Configuration.sqx";
call compile preprocessFileLineNumbers "Engima\AmbientNavalUnits\Classes\NavalGroup.sqx";

using Sqx.Markers;
using Sqx.Waypoints;

namespace Engima.AmbientNaval.Classes
{
	public class AmbientNaval
	{
		private fields ["_mConfiguration" as Configuration, "_mNavalGroups" as Array, "_mMissionHasStarted" as Boolean];
	
		// Creates a Engine object.
		// _configuration (Configuration): The configuration for this instance of the
		public constructor {
			params ["_configuration" as Configuration];
			
			_mConfiguration = _configuration;
			_self.IsRunning = false;
			
			_mNavalGroups = [];
			_mMissionHasStarted = false;
		};
		
		// Creates an instance of ambient infantry.
		// _parameters (Array): A key-value-paired list of configuration options.
		public static method AmbientNaval CreateInstance {
			params ["_parameters" as Array];			
			private ["_configuration" as Configuration];
			
			_configuration = new Configuration;
			
			// Set all configuration values.
			private _side = [_parameters, "SIDE", _configuration.Side] call Configuration.GetParamValue;
			private _unitClasses = [_parameters, "UNIT_CLASSES", _configuration.UnitClasses] call Configuration.GetParamValue;
			private _maxGroupsCount = [_parameters, "MAX_GROUPS_COUNT", _configuration.MaxGroupsCount] call Configuration.GetParamValue;
			private _minSpawnDistance = [_parameters, "MIN_SPAWN_DISTANCE", _configuration.MinSpawnDistance] call Configuration.GetParamValue;
			private _maxSpawnDistance = [_parameters, "MAX_SPAWN_DISTANCE", _configuration.MaxSpawnDistance] call Configuration.GetParamValue;
			private _minSpawnDistanceOnStart = [_parameters, "MIN_SPAWN_DISTANCE_ON_START", _configuration.MinSpawnDistanceOnStart] call Configuration.GetParamValue;
			private _minSkill = [_parameters, "MIN_SKILL", _configuration.MinSkill] call Configuration.GetParamValue;
			private _maxSkill = [_parameters, "MAX_SKILL", _configuration.MaxSkill] call Configuration.GetParamValue;
			private _whitelistMarkers = [_parameters, "WHITELIST_MARKERS", _configuration.WhitelistMarkers] call Configuration.GetParamValue;
			private _onGroupCreating = [_parameters, "ON_GROUP_CREATING", _configuration.OnGroupCreating] call Configuration.GetParamValue;
			private _onGroupCreated = [_parameters, "ON_GROUP_CREATED", _configuration.OnGroupCreated] call Configuration.GetParamValue;
			private _onGroupRemoving = [_parameters, "ON_GROUP_REMOVING", _configuration.OnGroupRemoving] call Configuration.GetParamValue;
			private _onCheckReleaseGroup = [_parameters, "ON_CHECK_RELEASE_GROUP", _configuration.OnCheckReleaseGroup] call Configuration.GetParamValue;
			private _onGroupReleased = [_parameters, "ON_GROUP_RELEASED", _configuration.OnGroupReleased] call Configuration.GetParamValue;
			private _inDebugMode = [_parameters, "IN_DEBUG_MODE", _configuration.InDebugMode] call Configuration.GetParamValue;

			_configuration.Side = _side;
			_configuration.UnitClasses = _unitClasses;
			_configuration.MaxGroupsCount = _maxGroupsCount;
			_configuration.MinSpawnDistance = _minSpawnDistance;
			_configuration.MaxSpawnDistance = _maxSpawnDistance;
			_configuration.MinSpawnDistanceOnStart = _minSpawnDistanceOnStart;
			_configuration.MinSkill = _minSkill;
			_configuration.MaxSkill = _maxSkill;
			_configuration.WhitelistMarkers = _whitelistMarkers;
			_configuration.OnGroupCreating = _onGroupCreating;
			_configuration.OnGroupCreated = _onGroupCreated;
			_configuration.OnGroupRemoving = _onGroupRemoving;
			_configuration.OnCheckReleaseGroup = _onCheckReleaseGroup;
			_configuration.OnGroupReleased = _onGroupReleased;
			_configuration.InDebugMode = _inDebugMode;
			
			private _instance = [_configuration] new AmbientNaval;
			call _instance.Start;
			_instance
		};
		
		// Gets all player positions.
		// Returns (Array): All player positions.
		private static method Array GetAllPlayerPositions {
			private _playerPositions = [];

			{
				_playerPositions pushBack (position vehicle _x);
			} foreach (call Helper.GetAllPlayers) as Object;
			
			_playerPositions
		};
		
		// Finds a suitable spawn position for an infantry group.
		// Returns (Array): A position. An empty array if no position could be found.
		private method Array FindSpawnPos {
			params ["_playerPositions" as Array];
			
			// Set the return parameter
	        _this set [1, ""];

            private ["_playerPos" as Array];
			private _spawnPos = [];
			private _tries = 0;

			private _minSpawnDistance = _mConfiguration.MinSpawnDistanceOnStart;
			if (_mMissionHasStarted) then {
				_minSpawnDistance = _mConfiguration.MinSpawnDistance
			};

			// Select the player surrounded by less groups.
			private _player1Pos = selectRandom _playerPositions;
			private _player2Pos = selectRandom _playerPositions;
			private _player1Count = 0;
			private _player2Count = 0;
			
			{
				private _pos = _x.Position;
				
				if (_pos distance2D _player1Pos < _pos distance2D _player2Pos) then {
					_player1Count = _player1Count + 1;
				}
				else {
					_player2Count = _player2count + 1;
				};
			} foreach _mNavalGroups as NavalGroup;
			
			if (_player1Count > _player2Count) then {
				_playerPos = _player2Pos;
			}
			else {
				_playerPos = _player1Pos;
			};
			
			while { count _spawnPos == 0 && count _playerPositions > 0 && _tries <= 20 } do
			{
				private _x = (_playerPos select 0) - _mConfiguration.MaxSpawnDistance + random (2 * _mConfiguration.MaxSpawnDistance);
				private _y = (_playerPos select 1) - _mConfiguration.MaxSpawnDistance + random (2 * _mConfiguration.MaxSpawnDistance);
				private _pos = [_x, _y, 0.2];
				private _mustBeInsideMarker = count _mConfiguration.WhitelistMarkers > 0;
				private _insideMarkerName = "";
				
				// Check that the position is inside an eventual whitelist marker
				if (_mustBeInsideMarker) then
				{
				    _insideMarkerName = [_pos, _mConfiguration.WhitelistMarkers] call MarkerHelper.PositionInsideAnyMarkerName;
				    _this set [1, _insideMarkerName];
				};
				
				private _tooCloseToPlayer = false;
				private _tooFarFromPlayers = true;
				
				if (surfaceIsWater _pos && { !_mustBeInsideMarker || { _insideMarkerName != "" }}) then {
					{
						scopeName "current";
					
						if (_x distance _pos < _minSpawnDistance) then {
							_tooCloseToPlayer = true;
							breakOut "current";
						};
					} foreach _playerPositions as Array;
					
					if (!_tooCloseToPlayer) then {
						{
							scopeName "current";
							
							if (_x distance _pos < _mConfiguration.MaxSpawnDistance) then {
								_tooFarFromPlayers = false;
								breakOut "current";
							};
						} foreach _playerPositions as Array;
						
						if (!_tooFarFromPlayers) then {
							_spawnPos = _pos;
						};
					};
					
					_tries = _tries + 1;
					sleep 0.1;
				};
			};
			
			_spawnPos
		};
		
		// Get whether this instance is running or not. true if it is running, otherwise false.
		public property Boolean IsRunning { get; private set; };
		
		// Calculates the blacklist coverage share for one player.
		// _playerPos (Array): The player's position.
		// Returns (Scalar): Coverage chare for surrounding blacklist markers. 0 if no area is
		//                   covered by blacklist marker, and 1 if all area is covered.
		private method Scalar CalculatePlayerBlacklistCoverage {
			params ["_playerPos" as Array];
			
			private _minSpawnDistance = _mConfiguration.MinSpawnDistance;
			private _playerRadius = _mConfiguration.MaxSpawnDistance;
			private _blacklistMarkers = _mConfiguration.WhitelistMarkers;
			private _sumCoveredShareBlacklist = 0;
			
			{
				private _distanceToMarker = _playerPos distance2D (getMarkerPos _x);
				private _avgMarkerRadius = (((getMarkerSize _x) select 0) + ((getMarkerSize _x) select 1)) / 2;
				private _coveredShare = 0;
				
				if (_distanceToMarker < _playerRadius + _avgMarkerRadius) then {
					// Om blacklistmarkern inte Ã¤r helt omsluten av playerradius
					if (_playerRadius > _distanceToMarker + _avgMarkerRadius) then {
						_coveredShare = _avgMarkerRadius / _playerRadius;
					}
					else {
						_coveredShare = (_playerRadius + _avgMarkerRadius - _distanceToMarker) / (2 * _playerRadius);
					};
				};

				_sumCoveredShareBlacklist = _sumCoveredShareBlacklist + _coveredShare;
			} foreach _blacklistMarkers as String;
			
			private _circleParts = 12;
			private _waterCount = 0;
			private _sumWaterCoveredShare = 0;
			
			for "_i" from 1 to _circleParts do {
				private _x = (_playerPos select 0) + _minSpawnDistance * sin (_i * 360 / _circleParts);
				private _y = (_playerPos select 1) + _minSpawnDistance * cos (_i * 360 / _circleParts);
				
				if (surfaceIsWater [_x, _y] && !([[_x, _y], _mConfiguration.WhitelistMarkers] call MarkerHelper.PositionInsideAnyMarker)) then {
					_waterCount = _waterCount + 1;
				};
			};

			_sumWaterCoveredShare = _waterCount / _circleParts;
			
			_sumCoveredShareBlacklist + _sumWaterCoveredShare
		};
		
		// Calculates how much area that is covered when blacklist markers are taken account of,
		// and takes all players and all blacklist markers in account.
		// _playerPositions (Array): All players' positions.
		// Returns (Scalar): The average share of area covered by blacklist markers. 0 = Nothing 
		// covered, 1 = all covered.
		private method Scalar CalculateBlacklistCoverage {
			params ["_playerPositions" as Array];
			
			private _sumShare = 0;
			
			{
				_sumShare = _sumShare + ([_x] call _self.CalculatePlayerBlacklistCoverage);
			} foreach _playerPositions as Array;
			
			_sumShare / count _playerPositions
		};
		
		// Runs the ambient infantry instance. Spawning and removing units accoring to the configuration.
		// The method should be spawned.
		private method Run {
			private ["_skill" as Scalar, "_group" as Group];
			private ["_correctedGroupsCount" as Scalar];
			private _groupsCount = 0 as Scalar;
			private _spawnPos = [] as Array;
			private _iteration = 0;
			private _startCountIterations = false;
			
			if (isNil "Engima_AmbientNavalUnits_CurrentUnitId") then {
				Engima_AmbientNavalUnits_CurrentUnitId = 1;
			};
			
			while { true } do
			{
				//[str _iteration] call dre_fnc_CL_ShowDebugTextAllClients;
				private _playerPositions = call AmbientNaval.GetAllPlayerPositions;
				
				if (count _playerPositions > 0) then {
					private _coveredShare = [_playerPositions] call _self.CalculateBlacklistCoverage;
					
					//_correctedGroupsCount = round (_mConfiguration.MaxGroupsCount * (1 - _coveredShare));
					_correctedGroupsCount = _mConfiguration.MaxGroupsCount;
					
					if (_groupsCount < _correctedGroupsCount) then
					{
						// Find a spawn position
						_spawnPos = [_playerPositions] call _self.FindSpawnPos;
					
						// If a spawn position could be found
						if (count _spawnPos > 0) then {
							_startCountIterations = true;
							private _vehicleClassName = selectRandom _mConfiguration.UnitClasses;
							
							if (true) then {
								_skill = _mConfiguration.MinSkill + random (_mConfiguration.MaxSkill - _mConfiguration.MinSkill);
								private _vehicle = _vehicleClassName createVehicle _spawnPos;
								createVehicleCrew _vehicle;
								
								{
									_x setSkill _skill;
								} foreach crew _vehicle as Object;
								
								private _varName = "Engima_AmbientNavalUnits_Unit_" + str Engima_AmbientNavalUnits_CurrentUnitId;
								Engima_AmbientNavalUnits_CurrentUnitId = Engima_AmbientNavalUnits_CurrentUnitId + 1;
								_vehicle setVehicleVarName _varName;
								_vehicle call compile format ["%1 = _this; publicVariable ""%1"";", _varName];
								
								_group = group _vehicle;
								_mNavalGroups pushBack [_vehicle, _mConfiguration] new NavalGroup;
								_groupsCount = _groupsCount + 1;
								
								[_group, _groupsCount] call _mConfiguration.OnGroupCreated;
								
								if (_mConfiguration.InDebugMode) then {
									player commandChat "Creating ambient naval unit. (Total: " + str _groupsCount + ")";
								};
							};
						};
					};
					
					// Make a list of all units to keep (that are not too far away from any player)
					private _keptGroups = [] as Array;
					
					// for each infantry group in _infantryGroups:
					{
						private _infantryGroup = _x;
						private _releaseGroup = [_infantryGroup.Group, _groupsCount] call _mConfiguration.OnCheckReleaseGroup;
	
						if (!_releaseGroup is Boolean) then {
							_releaseGroup = false;
						};
						
						private _groupPos = call _x.UpdatePosition;
						private _tooFarAway = true;
						{
							scopeName "innerLoop";
							
							if (_x distance2D _groupPos < _mConfiguration.MaxSpawnDistance) then {
								_tooFarAway = false;
								breakOut "innerLoop";
							};
						} foreach (call Helper.GetAllPlayers) as Object;
	
						if (_tooFarAway || _releaseGroup) then {
							if (_releaseGroup) then {
								_groupsCount = _groupsCount - 1;
								[_infantryGroup.Group] call WaypointHelper.DeleteAllWaypointsFromGroup;
								[_infantryGroup.Group, _groupsCount] call _mConfiguration.OnGroupReleased;
							}
							else {
								[_infantryGroup.Group, _groupsCount] call _mConfiguration.OnGroupRemoving;
						
								call _infantryGroup.Dispose;
								
								_groupsCount = _groupsCount - 1;
								
								if (_mConfiguration.InDebugMode) then {
									player commandChat "Removing ambient infantry group. (Total: " + str _groupsCount + ")";;
								};
							};
						}
						else {
							_keptGroups pushBack _infantryGroup;
							call _infantryGroup.CheckEnteredRestrictedArea;
						};
					} foreach _mNavalGroups as NavalGroup;
					
					_mNavalGroups = _keptGroups;
					_groupsCount = count _keptGroups;
				};
				
				if (_startCountIterations) then {
					_iteration = _iteration + 1;
				};
				
				// Sleep a while
				if (_iteration > _mConfiguration.MaxGroupsCount) then {
					_mMissionHasStarted = true;
					sleep 5;
				};
			};
		};
		
		// Starts the ambient infantry instance if it has not already started.
		public method Start {
			if (!_self.IsRunning) then {
				_self.IsRunning = true;
				[] spawn _self.Run;
			};
		};
	};
};
